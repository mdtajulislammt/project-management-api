// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}



model User {
  id        String   @id @default(auto()) @map("_id")  @db.ObjectId
  email     String   @unique
  password  String
  name      String
  role      String   @default("user")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  status    Int?     @default(1)
  // Relations
  assignedTasks Task[] @relation("AssignedTasks")
  createdTasks  Task[] @relation("CreatedTasks")
  comments      Comment[] @relation("UserComments")
  timelines     Timeline[]
  projects      Project[] @relation("ProjectOwner")
  presences     Presence[]
  notification     Notification[]
}


model Task {
  id          String   @id @default(auto()) @map("_id")  @db.ObjectId
  title       String
  description String?
  status      String
  state       String   @default("todo") // todo | in_progress | done
  dueDate     DateTime?
  projectId   String
  assignedTo  String
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  project     Project  @relation(fields: [projectId], references: [id])
  assignedUser User    @relation("AssignedTasks", fields: [assignedTo], references: [id])
  creator      User    @relation("CreatedTasks", fields: [createdBy], references: [id])
  comments     Comment[]
  timelines    Timeline[]
}


model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  taskId    String
  authorId  String
  content   String
  createdAt DateTime @default(now())
  status    Int?     @default(1)

  // Relations
  task      Task     @relation(fields: [taskId], references: [id])
  author    User     @relation("UserComments", fields: [authorId], references: [id])
}


model Timeline {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  taskId      String?
  projectId   String?
  userId      String
  action      String
  createdAt   DateTime @default(now())
  status      Int?     @default(1)

  // Relations
  user        User     @relation(fields: [userId], references: [id])
  task        Task?    @relation(fields: [taskId], references: [id])
  project     Project? @relation(fields: [projectId], references: [id])
}


model Project {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  ownerId     String   // Reference to the User who created the project
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  status      Int?     @default(1)

  // Relations
  tasks       Task[]
  timelines   Timeline[]
  owner       User     @relation("ProjectOwner", fields: [ownerId], references: [id])
  presences   Presence[]
}



model Presence {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String
  projectId String
  joinedAt  DateTime @default(now())
  leftAt    DateTime?
  status    Int?     @default(1)
  user      User     @relation(fields: [userId], references: [id])
  project   Project  @relation(fields: [projectId], references: [id])
}


model Notification {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String
  title       String
  message     String
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())

  user        User     @relation(fields: [userId], references: [id])
}


